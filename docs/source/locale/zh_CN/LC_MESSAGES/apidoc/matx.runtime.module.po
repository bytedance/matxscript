# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Bytedance Inc.
# This file is distributed under the same license as the Matxscript package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matxscript \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-20 16:33-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/apidoc/matx.runtime.module.rst:2
msgid "matx.runtime.module module"
msgstr ""

#~ msgid "Runtime Module namespace."
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid "Runtime Module."
#~ msgstr ""

#~ msgid "Call self as a function."
#~ msgstr ""

#~ msgid "Get the entry function"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "**f** -- The entry function if exist"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Export the module and its imported device code one library."
#~ msgstr ""

#~ msgid ""
#~ "This function only works on host "
#~ "llvm modules. It will pack all the"
#~ " imported modules"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "The name of the shared library."
#~ msgstr ""

#~ msgid ""
#~ "Compilation function to use create "
#~ "dynamic library. If fcompile has "
#~ "attribute object_format, will compile host "
#~ "library to that format. Otherwise, will"
#~ " use default format \"o\"."
#~ msgstr ""

#~ msgid "Additional arguments passed to fcompile"
#~ msgstr ""

#~ msgid "Get function from the module."
#~ msgstr ""

#~ msgid "The name of the function"
#~ msgstr ""

#~ msgid "Whether also query modules imported by this module."
#~ msgstr ""

#~ msgid "**f** -- The result function."
#~ msgstr ""

#~ msgid "Get source code from module, if available."
#~ msgstr ""

#~ msgid "The specified format."
#~ msgstr ""

#~ msgid "**source** -- The result source code."
#~ msgstr ""

#~ msgid "Add module to the import list of current one."
#~ msgstr ""

#~ msgid "The other module."
#~ msgstr ""

#~ msgid "Get imported modules"
#~ msgstr ""

#~ msgid "**modules** -- The module"
#~ msgstr ""

#~ msgid "Save the module to file."
#~ msgstr ""

#~ msgid "This do not save the dependent device modules. See also export_shared"
#~ msgstr ""

#~ msgid "The name of the file."
#~ msgstr ""

#~ msgid "The format of the file."
#~ msgstr ""

#~ msgid ":obj:`runtime.Module.export_library`"
#~ msgstr ""

#~ msgid "export the module to shared library."
#~ msgstr ""

#~ msgid "Get type key of the module."
#~ msgstr ""

#~ msgid "Bases: :py:class:`tuple`"
#~ msgstr ""

#~ msgid "Alias for field number 0"
#~ msgstr ""

#~ msgid "Alias for field number 1"
#~ msgstr ""

#~ msgid "Load module from file."
#~ msgstr ""

#~ msgid "The path to the module file."
#~ msgstr ""

#~ msgid ""
#~ "The format of the file, if not "
#~ "specified it will be inferred from "
#~ "suffix of the file."
#~ msgstr ""

#~ msgid "**module** -- The loaded module"
#~ msgstr ""

#~ msgid ""
#~ "This function will automatically call "
#~ "cc.create_shared if the path is in "
#~ "format .o or .tar"
#~ msgstr ""

#~ msgid "Get system-wide library module singleton."
#~ msgstr ""

#~ msgid ""
#~ "System lib is a global module that"
#~ " contains self register functions in "
#~ "startup. Unlike normal dso modules which"
#~ " need to be loaded explicitly. It "
#~ "is useful in environments where dynamic"
#~ " loading api like dlopen is banned."
#~ msgstr ""

#~ msgid ""
#~ "To build system lib function, simply "
#~ "specify target option ```llvm --system-"
#~ "lib``` The system lib will be "
#~ "available as long as the result "
#~ "code is linked by the program."
#~ msgstr ""

#~ msgid ""
#~ "The system lib is intended to be"
#~ " linked and loaded during the entire"
#~ " life-cyle of the program. If "
#~ "you want dynamic loading features, use"
#~ " dso modules instead."
#~ msgstr ""

#~ msgid "**module** -- The system-wide library module."
#~ msgstr ""

