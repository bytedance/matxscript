# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Bytedance Inc.
# This file is distributed under the same license as the Matxscript package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matxscript \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-20 16:33-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/apidoc/matx.vision.rst:2
msgid "matx.vision package"
msgstr ""

#: ../../source/apidoc/matx.vision.rst:10
msgid "Subpackages"
msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid ""
#~ "Apply auto contrast on input images, "
#~ "i.e. remap the image so that the"
#~ " darkest pixel becomes black (0), and"
#~ " the lightest becomes white (255)"
#~ msgstr ""

#~ msgid "Apply auto contrast on input images."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "target images."
#~ msgstr ""

#~ msgid ""
#~ "sync mode after calculating the output."
#~ " when device is cpu, the params "
#~ "makes no difference.   ASYNC -- If "
#~ "device is GPU, the whole calculation "
#~ "process is asynchronous.   SYNC -- If"
#~ " device is GPU, the whole calculation"
#~ " will be blocked until this operation"
#~ " is finished.   SYNC_CPU -- If device"
#~ " is GPU, the whole calculation will"
#~ " be blocked until this operation is"
#~ " finished, and the corresponding CPU "
#~ "array would be created and returned. "
#~ "Defaults to ASYNC."
#~ msgstr ""

#~ msgid ""
#~ "sync mode after calculating the output."
#~ " when device is cpu, the params "
#~ "makes no difference."
#~ msgstr ""

#~ msgid ""
#~ "ASYNC -- If device is GPU, the "
#~ "whole calculation process is asynchronous. "
#~ "SYNC -- If device is GPU, the "
#~ "whole calculation will be blocked until"
#~ " this operation is finished. SYNC_CPU "
#~ "-- If device is GPU, the whole "
#~ "calculation will be blocked until this"
#~ " operation is finished, and the "
#~ "corresponding CPU array would be created"
#~ " and returned."
#~ msgstr ""

#~ msgid "Defaults to ASYNC."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "converted images"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Example:"
#~ msgstr ""

#~ msgid "Initialize AutoContrastOp"
#~ msgstr ""

#~ msgid "the matx device used for the operation"
#~ msgstr ""

#~ msgid "Apply average blur on input images."
#~ msgstr ""

#~ msgid ""
#~ "conv kernel size for each image, "
#~ "each item in this list should be"
#~ " a 2 element tuple (x, y)."
#~ msgstr ""

#~ msgid ""
#~ "anchors of each kernel, each item "
#~ "in this list should be a 2 "
#~ "element tuple (x, y). If not "
#~ "given, -1 would be used by default"
#~ " to indicate anchor for from the "
#~ "center."
#~ msgstr ""

#~ msgid "Initialize AverageBlurOp"
#~ msgstr ""

#~ msgid ""
#~ "pixel extrapolation method, if border_type "
#~ "is BORDER_CONSTANT, 0 would be used "
#~ "as border value."
#~ msgstr ""

#~ msgid "Cast image data type to target type, e.g. uint8 to float32"
#~ msgstr ""

#~ msgid ""
#~ "Cast image data type to target "
#~ "type. Could apply factor scale and "
#~ "shift at the same time."
#~ msgstr ""

#~ msgid "target data type that want to convert to, e.g. uint8, float32, etc."
#~ msgstr ""

#~ msgid ""
#~ "scale factor when casting the data "
#~ "type, e.g. cast image from uint8 "
#~ "to float32, if want to change the"
#~ " value range from [0, 255] to "
#~ "[0, 1], alpha can be set as "
#~ "1.0/255."
#~ msgstr ""

#~ msgid "shift value when casting the data type"
#~ msgstr ""

#~ msgid "Initialize CastOp"
#~ msgstr ""

#~ msgid "Center crop the given images"
#~ msgstr ""

#~ msgid "CenterCrop images"
#~ msgstr ""

#~ msgid "input images."
#~ msgstr ""

#~ msgid "center crop images"
#~ msgstr ""

#~ msgid "Initialize CenterCropOp"
#~ msgstr ""

#~ msgid "the matx device used for the operation."
#~ msgstr ""

#~ msgid "output size for all images, must be 2 dim tuple."
#~ msgstr ""

#~ msgid "Apply channel reorder on input images."
#~ msgstr ""

#~ msgid ""
#~ "index order of the new channels "
#~ "for each image. e.g. if want to"
#~ " change bgr image to rgb image, "
#~ "the order could be [2,1,0]"
#~ msgstr ""

#~ msgid "Initialize ChannelReorderOp"
#~ msgstr ""

#~ msgid ""
#~ "Apply linear adjust on pixels of "
#~ "input images, i.e. apply a * v "
#~ "+ b for each pixel v in "
#~ "image/channel."
#~ msgstr ""

#~ msgid "Apply linear adjust on pixels of input images."
#~ msgstr ""

#~ msgid "factor for linear adjustment."
#~ msgstr ""

#~ msgid "shift for linear adjustment."
#~ msgstr ""

#~ msgid ""
#~ "converted images. The output value would"
#~ " be in its original data type "
#~ "range, e.g. for uint [0, 255]"
#~ msgstr ""

#~ msgid "Initialize ColorLinearAdjustOp"
#~ msgstr ""

#~ msgid ""
#~ "probability for linear ajustment on each"
#~ " image. Apply on all by default."
#~ msgstr ""

#~ msgid ""
#~ "if False, all channels of a single"
#~ " image would use the same linear "
#~ "parameters; if True, each channel would"
#~ " be able to set different linear "
#~ "adjustment"
#~ msgstr ""

#~ msgid "Apply conv kernels on input images."
#~ msgstr ""

#~ msgid "conv kernels for each image."
#~ msgstr ""

#~ msgid "Initialize Conv2dOp"
#~ msgstr ""

#~ msgid "Crop images in batch on GPU with customized parameters."
#~ msgstr ""

#~ msgid "Crop images"
#~ msgstr ""

#~ msgid "source/input image"
#~ msgstr ""

#~ msgid "the x coordinates of the top_left corner of the cropped region."
#~ msgstr ""

#~ msgid "the y coordinates of the top_left corner of the cropped region."
#~ msgstr ""

#~ msgid "desired width for each cropped image."
#~ msgstr ""

#~ msgid "desired height for each cropped image."
#~ msgstr ""

#~ msgid "crop images"
#~ msgstr ""

#~ msgid "Initialize CropOp"
#~ msgstr ""

#~ msgid "Color convertion for input images."
#~ msgstr ""

#~ msgid "Apply color convertion for input images."
#~ msgstr ""

#~ msgid "Initialize CvtColorOp"
#~ msgstr ""

#~ msgid "color convertion code, e.g. matx.vision.COLOR_BGR2RGB"
#~ msgstr ""

#~ msgid ""
#~ "Generate a black & white edge "
#~ "image and alpha-blend it with the"
#~ " input image. Edge detect kernel is"
#~ " [[0, 1, 0], [1, -4, 1], [0,"
#~ " 1, 0]]."
#~ msgstr ""

#~ msgid "Generate an edge image and alpha-blend it with the input image."
#~ msgstr ""

#~ msgid ""
#~ "blending factor for each image. If "
#~ "omitted, the alpha set in op "
#~ "initialization would be used for all "
#~ "images."
#~ msgstr ""

#~ msgid "Initialize EdgeDetectOp"
#~ msgstr ""

#~ msgid ""
#~ "alpha-blend factor, 1.0 by default, "
#~ "which means only keep the edge "
#~ "image."
#~ msgstr ""

#~ msgid ""
#~ "Emboss images and alpha-blend the "
#~ "result with the original input images."
#~ " Emboss kernel is [[-1-s, -s, 0], "
#~ "[-s, 1, s], [0, s, 1+s]], emboss"
#~ " strength is controlled by s here."
#~ msgstr ""

#~ msgid ""
#~ "Emboss images and alpha-blend the "
#~ "result with the original input images."
#~ msgstr ""

#~ msgid ""
#~ "parameter that controls the strength of"
#~ " the emboss. If omitted, the strength"
#~ " set in op initialization would be"
#~ " used for all images."
#~ msgstr ""

#~ msgid "Initialize EmbossOp"
#~ msgstr ""

#~ msgid ""
#~ "alpha-blend factor, 1.0 by default, "
#~ "which means only keep the emboss "
#~ "image."
#~ msgstr ""

#~ msgid "strength of the emboss, 0.0 by default."
#~ msgstr ""

#~ msgid "Flip the given images along specified directions."
#~ msgstr ""

#~ msgid "Flip images with specified directions."
#~ msgstr ""

#~ msgid ""
#~ "flip type for each image in the"
#~ " batch. HORIZONTAL_FLIP -- flip "
#~ "horizontally, VERTICAL_FLIP -- flip "
#~ "vertically, DIAGONAL_FLIP -- flip horizontally"
#~ " and vertically, FLIP_NOT_APPLY --  keep"
#~ " the original If omitted, the value"
#~ " set in the op initialization would"
#~ " be used for all images."
#~ msgstr ""

#~ msgid "Initialize FlipOp"
#~ msgstr ""

#~ msgid ""
#~ "flip type. HORIZONTAL_FLIP -- flip "
#~ "horizontally, VERTICAL_FLIP -- flip "
#~ "vertically, DIAGONAL_FLIP -- flip horizontally"
#~ " and vertically, FLIP_NOT_APPLY --  keep"
#~ " the original HORIZONTAL_FLIP by default."
#~ " Could be overriden in runtime to "
#~ "set for each image in the batch."
#~ msgstr ""

#~ msgid ""
#~ "probability for flipping each image, by"
#~ " default flipping all images with "
#~ "given flip code."
#~ msgstr ""

#~ msgid ""
#~ "Apply gamma contrast on input images,"
#~ " i.e. for each pixel value v: "
#~ "255*((v/255)**gamma)"
#~ msgstr ""

#~ msgid "Apply gamma contrast on input images."
#~ msgstr ""

#~ msgid ""
#~ "gamma value for each image / "
#~ "channel. If `per_channel` is False, the"
#~ " list should have the same size "
#~ "as batch size. If `per_channel` is "
#~ "True, the list should contain channel"
#~ " * batch_size elements."
#~ msgstr ""

#~ msgid "Initialize GammaContrastOp"
#~ msgstr ""

#~ msgid ""
#~ "For each pixel, whether to apply "
#~ "the gamma contrast with different gamma"
#~ " value (True), or through out the "
#~ "channels using same gamma value (False)."
#~ " False by default."
#~ msgstr ""

#~ msgid "Apply gaussian noise on input images."
#~ msgstr ""

#~ msgid ""
#~ "mu value for each image. If "
#~ "omitted, the mu value set during "
#~ "the op initialization would be used "
#~ "for all images."
#~ msgstr ""

#~ msgid ""
#~ "sigma value for each image. If "
#~ "omitted, the sigma value set during "
#~ "the op initialization would be used "
#~ "for all images."
#~ msgstr ""

#~ msgid "Initialize GaussNoiseOp"
#~ msgstr ""

#~ msgid ""
#~ "max batch size for gaussian noise "
#~ "op. It is required for cuda "
#~ "randomness initialization. When actually "
#~ "calling this op, the input batch "
#~ "size should be equal to or less"
#~ " than this value."
#~ msgstr ""

#~ msgid ""
#~ "mu for gaussian noise. It is a "
#~ "global value for all images, can "
#~ "be overridden in calling time, 0.0 "
#~ "by default."
#~ msgstr ""

#~ msgid ""
#~ "sigma for gaussian noise. It is a"
#~ " global value for all images, can "
#~ "be overridden in calling time, 1.0 "
#~ "by default."
#~ msgstr ""

#~ msgid ""
#~ "For each pixel, whether to add the"
#~ " noise per channel with different "
#~ "value (True), or through out the "
#~ "channels using same value (False). False"
#~ " by default."
#~ msgstr ""

#~ msgid "Apply gaussian blur on input images."
#~ msgstr ""

#~ msgid ""
#~ "sigma for gaussian blur, each item "
#~ "in this list should be a 2 "
#~ "element tuple (x, y)."
#~ msgstr ""

#~ msgid "Initialize GaussianBlurOp"
#~ msgstr ""

#~ msgid ""
#~ "Apply histgram equalization on input "
#~ "images. Please refer to "
#~ "https://en.wikipedia.org/wiki/Histogram_equalization for "
#~ "more information."
#~ msgstr ""

#~ msgid "Apply histgram equalization on input images."
#~ msgstr ""

#~ msgid "Initialize HistEqualizeOp"
#~ msgstr ""

#~ msgid "Decode binary image without raising exception when handle invalid image"
#~ msgstr ""

#~ msgid "list of binary images"
#~ msgstr ""

#~ msgid ""
#~ "sync mode after calculating the output."
#~ " when device is cpu, the param "
#~ "makes no difference.   ASYNC -- If "
#~ "device is GPU, the whole calculation "
#~ "process is asynchronous.   SYNC -- If"
#~ " device is GPU, the whole calculation"
#~ " will bolcking util the compute is"
#~ " completed.   SYNC_CPU -- If device "
#~ "is GPU, the whole calculation will "
#~ "bolcking util the compute is completed,"
#~ " then copying the CUDA data to "
#~ "CPU. Defaults to ASYNC."
#~ msgstr ""

#~ msgid ""
#~ "sync mode after calculating the output."
#~ " when device is cpu, the param "
#~ "makes no difference."
#~ msgstr ""

#~ msgid ""
#~ "ASYNC -- If device is GPU, the "
#~ "whole calculation process is asynchronous. "
#~ "SYNC -- If device is GPU, the "
#~ "whole calculation will bolcking util the"
#~ " compute is completed. SYNC_CPU -- If"
#~ " device is GPU, the whole calculation"
#~ " will bolcking util the compute is"
#~ " completed, then copying the CUDA "
#~ "data to CPU."
#~ msgstr ""

#~ msgid "decoded images List[int]: 1 means operation is successful, otherwise 0"
#~ msgstr ""

#~ msgid "Initialize ImdecodeOp"
#~ msgstr ""

#~ msgid "device used for the operation"
#~ msgstr ""

#~ msgid "the color type for output image, support \"RGB\" and \"BGR\""
#~ msgstr ""

#~ msgid "concurrency of decode operation, only for gpu, Defaults to 8."
#~ msgstr ""

#~ msgid "Call self as a function."
#~ msgstr ""

#~ msgid "Decode binary image"
#~ msgstr ""

#~ msgid "decoded images"
#~ msgstr ""

#~ msgid "Examples:"
#~ msgstr ""

#~ msgid "Decode binary image and random crop"
#~ msgstr ""

#~ msgid ""
#~ "Specifies the lower and upper bounds "
#~ "for the random area of the crop,"
#~ " before resizing. The scale is "
#~ "defined with respect to the area "
#~ "of the original image."
#~ msgstr ""

#~ msgid ""
#~ "lower and upper bounds for the "
#~ "random aspect ratio of the crop, "
#~ "before resizing."
#~ msgstr ""

#~ msgid "Invert all values in images. e.g. turn 20 into 255-20=235"
#~ msgstr ""

#~ msgid "Invert image pixels by substracting itself from given cap value"
#~ msgstr ""

#~ msgid "Initialize InvertOp"
#~ msgstr ""

#~ msgid "probability for inversion. Invert all by default."
#~ msgstr ""

#~ msgid ""
#~ "whether to apply the inversion "
#~ "probability on each image or each "
#~ "channel."
#~ msgstr ""

#~ msgid "the minuend for inversion, 255.0 by default."
#~ msgstr ""

#~ msgid "Apply laplacian blur on input images."
#~ msgstr ""

#~ msgid ""
#~ "conv kernel size for each image, "
#~ "laplacian kernel is a square shaped "
#~ "kernel, so each item in this list"
#~ " is an integer."
#~ msgstr ""

#~ msgid "scale factor for laplacian blur"
#~ msgstr ""

#~ msgid "Initialize LaplacianBlurOp"
#~ msgstr ""

#~ msgid "Calculate mean over each image."
#~ msgstr ""

#~ msgid ""
#~ "mean result. For N images, the "
#~ "result would be shape Nx1 if "
#~ "per_channel is False, otherwise NxC "
#~ "where C is the image channel size."
#~ msgstr ""

#~ msgid ""
#~ "Example: >>> import cv2 >>> import "
#~ "matx >>> from matx.vision import MeanOp"
#~ msgstr ""

#~ msgid "Initialize MeanOp"
#~ msgstr ""

#~ msgid ""
#~ "if True, calculate mean over each "
#~ "channel; if False, calculate mean over"
#~ " the whole image."
#~ msgstr ""

#~ msgid "Apply median blur on input images."
#~ msgstr ""

#~ msgid "Initialize MedianBlurOp"
#~ msgstr ""

#~ msgid ""
#~ "Weighted add up two images, i.e. "
#~ "calculate a * img1 + b * "
#~ "img2. img2 should have the same "
#~ "width and height as img1, while "
#~ "img2 would either have the same "
#~ "channel size as img1, or img2 only"
#~ " contains 1 channel."
#~ msgstr ""

#~ msgid "Weighted add up two images."
#~ msgstr ""

#~ msgid "augend images."
#~ msgstr ""

#~ msgid "addend images."
#~ msgstr ""

#~ msgid "weighted factor for images1."
#~ msgstr ""

#~ msgid "weighted factor for images2."
#~ msgstr ""

#~ msgid "Initialize MixupImagesOp"
#~ msgstr ""

#~ msgid ""
#~ "Normalize images with mean and std, "
#~ "and cast the image data type to"
#~ " target type."
#~ msgstr ""

#~ msgid "Initialize NormalizeOp"
#~ msgstr ""

#~ msgid "mean for normalize"
#~ msgstr ""

#~ msgid "std for normalize"
#~ msgstr ""

#~ msgid "output data type when normalize finished, float32 by default."
#~ msgstr ""

#~ msgid "shift value for all pixels after the normalization, 0.0 by default."
#~ msgstr ""

#~ msgid ""
#~ "scale factor value for all pixels "
#~ "after the normalization, 1.0 by default."
#~ msgstr ""

#~ msgid "Forms a border around given image."
#~ msgstr ""

#~ msgid "Pad input images."
#~ msgstr ""

#~ msgid "Pad images."
#~ msgstr ""

#~ msgid "Initialize PadOp"
#~ msgstr ""

#~ msgid ""
#~ "Border value if border_type==BORDER_CONSTANT. "
#~ "Padding value is 3 dim tuple, "
#~ "three channels would be padded with "
#~ "the given value. Defaults to (0, "
#~ "0, 0)."
#~ msgstr ""

#~ msgid ""
#~ "pad mode, could be chosen from "
#~ "BORDER_CONSTANT, BORDER_REPLICATE, BORDER_REFLECT, "
#~ "BORDER_WRAP, more pad_type see cv_border_types"
#~ " for details. Defaults to BORDER_CONSTANT."
#~ msgstr ""

#~ msgid "If True, forms a border in lower right of the image. Defaults to False."
#~ msgstr ""

#~ msgid "Pad input images with border."
#~ msgstr ""

#~ msgid "The number of pixels to pad that above the images."
#~ msgstr ""

#~ msgid "The number of pixels to pad that below the images."
#~ msgstr ""

#~ msgid "The number of pixels to pad that to the left of the images."
#~ msgstr ""

#~ msgid "The number of pixels to pad that to the right of the images."
#~ msgstr ""

#~ msgid ""
#~ "Example: >>> import cv2 >>> import "
#~ "matx >>> from matx.vision import "
#~ "PadWithBorderOp"
#~ msgstr ""

#~ msgid "Initialize PadWithBorderOp"
#~ msgstr ""

#~ msgid ""
#~ "Apply posterization on images. i.e. "
#~ "remove certain bits for each pixel "
#~ "value, e.g. with bit=4, pixel 77 "
#~ "would become 64 (the last 4 bits"
#~ " are set to 0)."
#~ msgstr ""

#~ msgid "Apply posterization on images. Only support uint8 images"
#~ msgstr ""

#~ msgid ""
#~ "posterization bit for each image. If "
#~ "not given, the bit for op "
#~ "initialization would be used."
#~ msgstr ""

#~ msgid "Initialize PosterizeOp"
#~ msgstr ""

#~ msgid ""
#~ "bit for posterization for all images,"
#~ " range from [0, 8], set to 4"
#~ " by default."
#~ msgstr ""

#~ msgid "probability for posterization on each image. Apply on all by default."
#~ msgstr ""

#~ msgid "Randomly drop out some pixels (set to 0) for input images."
#~ msgstr ""

#~ msgid ""
#~ "drop out probability for each image. "
#~ "If omitted, the value set during "
#~ "the op initialization would be used "
#~ "for all images."
#~ msgstr ""

#~ msgid "Initialize RandomDropoutOp"
#~ msgstr ""

#~ msgid ""
#~ "max batch size for sp noise op."
#~ " It is required for cuda randomness"
#~ " initialization. When actually calling this"
#~ " op, the input batch size should "
#~ "be equal to or less than this "
#~ "value."
#~ msgstr ""

#~ msgid ""
#~ "the probability for each pixel to "
#~ "be dropped out, range from 0 to"
#~ " 1, 0.01 by default, can be "
#~ "overridden in runtime."
#~ msgstr ""

#~ msgid ""
#~ "For each pixel, whether to drop "
#~ "out the value differently for each "
#~ "channel (True), or drop out the "
#~ "value through out all the channels "
#~ "(False). False by default."
#~ msgstr ""

#~ msgid "RandomResizedCropOp given image on gpu."
#~ msgstr ""

#~ msgid "Resize and Crop image depends on scale and ratio."
#~ msgstr ""

#~ msgid "RandomResizedCrop images."
#~ msgstr ""

#~ msgid "Initialize RandomResizedCropOP"
#~ msgstr ""

#~ msgid ""
#~ "Desired interpolation. INTER_NEAREST -- a "
#~ "nearest-neighbor interpolation; INTER_LINEAR "
#~ "-- a bilinear interpolation (used by "
#~ "default); INTER_CUBIC -- a bicubic "
#~ "interpolation over 4x4 pixel neighborhood; "
#~ "PILLOW_INTER_LINEAR  -- a bilinear "
#~ "interpolation, simalir to Pillow(only support"
#~ " GPU) Defaults to INTER_LINEAR."
#~ msgstr ""

#~ msgid "Resize input images."
#~ msgstr ""

#~ msgid ""
#~ "target size for each image, must "
#~ "be 2 dim tuple (h, w). If "
#~ "omitted, the target size set in op"
#~ " initialization would be used for all"
#~ " images."
#~ msgstr ""

#~ msgid "Initialize ResizeOp"
#~ msgstr ""

#~ msgid ""
#~ "output size for all images, must "
#~ "be 2 dim tuple. If omitted, the"
#~ " size must be given when calling."
#~ msgstr ""

#~ msgid ""
#~ "used in RESIZE_NOT_SMALLER mode to make"
#~ " sure output size is not too "
#~ "large."
#~ msgstr ""

#~ msgid ""
#~ "desired interpolation method. INTER_NEAREST --"
#~ " a nearest-neighbor interpolation; "
#~ "INTER_LINEAR -- a bilinear interpolation "
#~ "(used by default); INTER_CUBIC -- a "
#~ "bicubic interpolation over 4x4 pixel "
#~ "neighborhood; PILLOW_INTER_LINEAR  -- a "
#~ "bilinear interpolation, simalir to Pillow(only"
#~ " support GPU) INTER_LINEAR by default."
#~ msgstr ""

#~ msgid ""
#~ "resize mode, could be chosen from "
#~ "RESIZE_DEFAULT, RESIZE_NOT_LARGER, and "
#~ "RESIZE_NOT_SMALLER RESIZE_DEFAULT -- resize to"
#~ " the target output size RESIZE_NOT_LARGER"
#~ " -- keep the width/height ratio, "
#~ "final output size would be one dim"
#~ " equal to target, one dim smaller."
#~ " e.g. original image shape (360, "
#~ "240), target size (480, 360), output "
#~ "size (480, 320) RESIZE_NOT_SMALLER -- "
#~ "keep the width/height ratio, final "
#~ "output size would be one dim equal"
#~ " to target, one dim larger. e.g. "
#~ "original image shape (360, 240), target"
#~ " size (480, 360), output size (540,"
#~ " 360) RESIZE_DEFAULT by default."
#~ msgstr ""

#~ msgid "Apply image rotation."
#~ msgstr ""

#~ msgid "Apply rotation on images."
#~ msgstr ""

#~ msgid "rotation angle for each image"
#~ msgstr ""

#~ msgid ""
#~ "rotation center (y, x) for each "
#~ "image, if omitted, the image center "
#~ "would be used as rotation center."
#~ msgstr ""

#~ msgid "Initialize RotateOp"
#~ msgstr ""

#~ msgid "border type to fill the target image, use constant value by default."
#~ msgstr ""

#~ msgid ""
#~ "the border value to fill the "
#~ "target image if pad_type is "
#~ "BORDER_CONSTANT, (0, 0, 0) by default."
#~ msgstr ""

#~ msgid ""
#~ "desired interpolation method. INTER_NEAREST --"
#~ " a nearest-neighbor interpolation; "
#~ "INTER_LINEAR -- a bilinear interpolation "
#~ "(used by default); INTER_CUBIC -- a "
#~ "bicubic interpolation over 4x4 pixel "
#~ "neighborhood; INTER_LINEAR by default."
#~ msgstr ""

#~ msgid ""
#~ "control the shape of rotated image. "
#~ "If False, the rotated images would "
#~ "be center cropped into the original "
#~ "size; if True, expand the output "
#~ "to make it large enough to hold"
#~ " the entire rotated image."
#~ msgstr ""

#~ msgid "Apply salt and pepper noise on input images."
#~ msgstr ""

#~ msgid "Apply sp noise on input images."
#~ msgstr ""

#~ msgid ""
#~ "probability to add sp noise for "
#~ "each image. If omitted, the value "
#~ "set during the op initialization would"
#~ " be used for all images."
#~ msgstr ""

#~ msgid ""
#~ "probability to add salt noise for "
#~ "each image. If omitted, the value "
#~ "set during the op initialization would"
#~ " be used for all images."
#~ msgstr ""

#~ msgid "Initialize SaltAndPepperOp"
#~ msgstr ""

#~ msgid ""
#~ "the probability for each pixel to "
#~ "add sp noise, range from 0 to "
#~ "1, 0.01 by default, can be "
#~ "overridden in runtime."
#~ msgstr ""

#~ msgid ""
#~ "for those pixels that need to "
#~ "apply salt_n_pepper noise, the probability "
#~ "that the salt noise would be, "
#~ "range from 0 to 1. The pepper "
#~ "probability would then be (1 - "
#~ "salt_prob). 0.5 by default, can be "
#~ "overridden in runtime."
#~ msgstr ""

#~ msgid ""
#~ "Sharpen images and alpha-blend the "
#~ "result with the original input images."
#~ " Sharpen kernel is [[-1, -1, -1], "
#~ "[-1, 8+l,-1], [-1, -1, -1]], sharpen "
#~ "lightness is controlled by l here."
#~ msgstr ""

#~ msgid ""
#~ "Sharpen images and alpha-blend the "
#~ "result with the original input images."
#~ msgstr ""

#~ msgid ""
#~ "lightness/brightness for each image. If "
#~ "omitted, the lightness set in op "
#~ "initialization would be used for all "
#~ "images."
#~ msgstr ""

#~ msgid "Initialize SharpenOp"
#~ msgstr ""

#~ msgid ""
#~ "alpha-blend factor, 1.0 by default, "
#~ "which means only keep the sharpened "
#~ "image."
#~ msgstr ""

#~ msgid "lightness/brightness of the sharpened image, 1.0 by default."
#~ msgstr ""

#~ msgid ""
#~ "Apply solarization on images. i.e. "
#~ "invert the pixel value if the "
#~ "value is above the given threshold."
#~ msgstr ""

#~ msgid "Apply solarization on images. Only support uint8 images"
#~ msgstr ""

#~ msgid ""
#~ "solarization threshold for each image. "
#~ "If not given the threshold for op"
#~ " initialization would be used."
#~ msgstr ""

#~ msgid "Initialize SolarizeOp"
#~ msgstr ""

#~ msgid "solarization threshold for all images, 128 by default."
#~ msgstr ""

#~ msgid "probability for solarization on each image. Apply on all by default."
#~ msgstr ""

#~ msgid "split input image along channel dimension. The input is a single image."
#~ msgstr ""

#~ msgid "split input image along channel dimension."
#~ msgstr ""

#~ msgid "target image."
#~ msgstr ""

#~ msgid "Initialize SplitOp"
#~ msgstr ""

#~ msgid "Stack images along first dim"
#~ msgstr ""

#~ msgid "matx.runtime.NDArray"
#~ msgstr ""

#~ msgid "Sum over each image."
#~ msgstr ""

#~ msgid ""
#~ "summation result. For N images, the "
#~ "result would be shape Nx1 if "
#~ "per_channel is False, otherwise NxC "
#~ "where C is the image channel size."
#~ msgstr ""

#~ msgid "Initialize SumOp"
#~ msgstr ""

#~ msgid "if True, sum over each channel; if False, sum over the whole image."
#~ msgstr ""

#~ msgid ""
#~ "Normalize images with mean and std, "
#~ "cast the image data type to target"
#~ " type, stack the images into a "
#~ "single array, and then update the "
#~ "array format (e.g. NHWC or NCHW)."
#~ msgstr ""

#~ msgid ""
#~ "Example: >>> import cv2 >>> import "
#~ "matx >>> from matx.vision import "
#~ "TransposeNormalizeOp"
#~ msgstr ""

#~ msgid "Initialize TransposeNormalizeOp"
#~ msgstr ""

#~ msgid "the data layout format after the stack, e.g. NHWC"
#~ msgstr ""

#~ msgid "the target data layout, e.g. NCHW."
#~ msgstr ""

#~ msgid "Convert image tensor layout, this operators only support gpu backend."
#~ msgstr ""

#~ msgid "Transpose image tensor."
#~ msgstr ""

#~ msgid "Transpose images."
#~ msgstr ""

#~ msgid "Initialize TransposeOp"
#~ msgstr ""

#~ msgid "the input image tensor layout. only suppport NCHW or NHWC."
#~ msgstr ""

#~ msgid "the desired image tensor layout. only support NCHW or NHWC."
#~ msgstr ""

#~ msgid "Apply warp affine on images."
#~ msgstr ""

#~ msgid "affine matrix for each image, each matrix should be of shape 2x3."
#~ msgstr ""

#~ msgid ""
#~ "target output size (h, w) for "
#~ "affine transformation. If omitted, the "
#~ "image original shape would be used."
#~ msgstr ""

#~ msgid "Initialize WarpAffineOp"
#~ msgstr ""

#~ msgid "Apply warp perspective on images."
#~ msgstr ""

#~ msgid ""
#~ "coordinate pairs of src and dst "
#~ "points. the shape of pts is "
#~ "Nx2xMx2, where N is the batch "
#~ "size, the left side 2 represents "
#~ "src and dst points respectively, M "
#~ "means the number of points for "
#~ "src/dst, the right side 2 represents "
#~ "the coordinator for each point, which"
#~ " is a 2 element tuple (x, y)."
#~ " If still confused, please see the"
#~ " usage in the example below."
#~ msgstr ""

#~ msgid ""
#~ "target output size (h, w) for "
#~ "perspective transformation. If omitted, the"
#~ " image original shape would be used."
#~ msgstr ""

#~ msgid "Initialize WarpPerspectiveOp"
#~ msgstr ""

