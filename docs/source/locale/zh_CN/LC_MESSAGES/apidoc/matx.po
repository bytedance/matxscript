# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Bytedance Inc.
# This file is distributed under the same license as the Matxscript package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matxscript \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-20 16:33-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/apidoc/matx.rst:4
msgid "matx package"
msgstr ""

#: ../../source/apidoc/matx.rst:12
msgid "Subpackages"
msgstr ""

#~ msgid "Bases: :py:class:`~matx.runtime.object.Object`"
#~ msgstr ""

#~ msgid "matx.Dict implemented refering to python built-in dict,"
#~ msgstr ""

#~ msgid "supports common methods of built-in list and some custom methods."
#~ msgstr ""

#~ msgid "Dict() -> construct empty dict"
#~ msgstr ""

#~ msgid "Dict(mapping) -> construct dict from mapping"
#~ msgstr ""

#~ msgid "Returns the number of slots in the hash table."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid "Remove all items."
#~ msgstr ""

#~ msgid "None"
#~ msgstr ""

#~ msgid "Return the value for key if key is in the dictionary, d."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "defautl return value when k is not in dict"
#~ msgstr ""

#~ msgid "item"
#~ msgstr ""

#~ msgid "Return a key-value iterable (matx.Iterator)."
#~ msgstr ""

#~ msgid "matx.Iterator"
#~ msgstr ""

#~ msgid "Return a key iterable."
#~ msgstr ""

#~ msgid ""
#~ ".pop(k[,d]) -> v, remove specified key"
#~ " and return the corresponding value."
#~ msgstr ""

#~ msgid ""
#~ "If key is not found, d is "
#~ "returned if given, otherwise Exception "
#~ "is raised"
#~ msgstr ""

#~ msgid ""
#~ "Increase the capacity of the dict "
#~ "to a value that's greater or equal"
#~ " to new_size."
#~ msgstr ""

#~ msgid "Return a value iterable."
#~ msgstr ""

#~ msgid "A simple file class, which only supports reading by lines now."
#~ msgstr ""

#~ msgid "File(path, mode, encoding) -> similar to builtins.open"
#~ msgstr ""

#~ msgid "matx.List implemented refering to python built-in list,"
#~ msgstr ""

#~ msgid "List() -> construct empty list"
#~ msgstr ""

#~ msgid "List(iterable) -> construct list from iterable object"
#~ msgstr ""

#~ msgid "Append object to the end of the list."
#~ msgstr ""

#~ msgid ""
#~ "Return the number of elements that "
#~ "the list has currently allocated space"
#~ " for."
#~ msgstr ""

#~ msgid "Remove all items from list."
#~ msgstr ""

#~ msgid "Extend list by appending elements from the iterable."
#~ msgstr ""

#~ msgid "iterable"
#~ msgstr ""

#~ msgid ""
#~ "Return zero-based index in the "
#~ "list of the first item whose value"
#~ " is equal to x."
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid ""
#~ "Insert an item at a given "
#~ "position. The first argument is the "
#~ "index of the element before which "
#~ "to insert"
#~ msgstr ""

#~ msgid "Remove and return item at index (default last)."
#~ msgstr ""

#~ msgid "Raises Exception if list is empty or index is out of range."
#~ msgstr ""

#~ msgid "Remove first occurrence of value."
#~ msgstr ""

#~ msgid "Raises Exception if the value is not present."
#~ msgstr ""

#~ msgid ""
#~ "Increase the capacity of the list "
#~ "to a value that's greater or equal"
#~ " to new_size."
#~ msgstr ""

#~ msgid "Reverse *IN PLACE*."
#~ msgstr ""

#~ msgid "Lightweight NDArray implementation for matx runtime"
#~ msgstr ""

#~ msgid ""
#~ "The structure is currently just a "
#~ "container for a multi-dimensional array,"
#~ " without defining various types of "
#~ "transformations and arithmetic methods. The"
#~ " goal of the structure is to "
#~ "serve as a bridge tool and other"
#~ " machine learning frameworks (pytorch "
#~ "tensorflow) for the conversion of "
#~ "multidimensional arrays"
#~ msgstr ""

#~ msgid "Constructing the contents of an NDArray"
#~ msgstr ""

#~ msgid "Shape of the constructed NDArray"
#~ msgstr ""

#~ msgid ""
#~ "The type of the constructed NDArray "
#~ "element, supporting \"int32\" \"int64\" "
#~ "\"float32\" \"float64\""
#~ msgstr ""

#~ msgid "Construction method 1"
#~ msgstr ""

#~ msgid ""
#~ "arr is a one-dimensional List, the"
#~ " shape is not empty, producing "
#~ "NDArray with the content of arr "
#~ "and the shape of the given shape"
#~ msgstr ""

#~ msgid "Examples:"
#~ msgstr ""

#~ msgid "Construction method 2"
#~ msgstr ""

#~ msgid ""
#~ "arr is a List of arbitrary "
#~ "dimensions, shape is an empty List, "
#~ "producing NDArray with the same shape"
#~ " as arr and the same content as"
#~ " arr"
#~ msgstr ""

#~ msgid "Construction method 3"
#~ msgstr ""

#~ msgid ""
#~ "arr is empty, shape is not empty,"
#~ " return a NDArray corresponding to "
#~ "the random initialization content of the"
#~ " shape"
#~ msgstr ""

#~ msgid ""
#~ "Construct a numpy.ndarray from the "
#~ "current NDArray. Note! This method "
#~ "cannot be compiled for use in "
#~ "matx.script"
#~ msgstr ""

#~ msgid "numpy.ndarray"
#~ msgstr ""

#~ msgid ""
#~ "Returns a copy of the ndarray with"
#~ " contiguous memory if the adarray is"
#~ " not contiguous. Otherwise, the original"
#~ " one is returned."
#~ msgstr ""

#~ msgid "matx.NDArray"
#~ msgstr ""

#~ msgid "Returns the current NDArray device as a string"
#~ msgstr ""

#~ msgid ""
#~ "Returns the number of array dimensions."
#~ " Unlike numpy, this is a method "
#~ "and not a property."
#~ msgstr ""

#~ msgid "Returns the dtype of the current NDArray as a string"
#~ msgstr ""

#~ msgid "\"int32\" \"int64\" \"float32\" \"float64\""
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ""
#~ "Copy data from a numpy.ndarray to "
#~ "the current NDArray, requiring both to"
#~ " have the same size."
#~ msgstr ""

#~ msgid "Note! This method cannot be compiled for use in matx.script"
#~ msgstr ""

#~ msgid "self"
#~ msgstr ""

#~ msgid ""
#~ "Returns a int indicating if the "
#~ "underlying data is contiguous in memory."
#~ " The continuity of array changes when"
#~ " its stride changes."
#~ msgstr ""

#~ msgid ""
#~ "Returns the current NDArray's shape, "
#~ "unlike numpy, this is a method and"
#~ " not a property"
#~ msgstr ""

#~ msgid "matx.List"
#~ msgstr ""

#~ msgid ""
#~ "Returns List of bytes to step in"
#~ " each dimension when traversing an "
#~ "array."
#~ msgstr ""

#~ msgid "Convert a NDArray to a matx.List corresponding to the shape"
#~ msgstr ""

#~ msgid "convert NDArray to torch.Tensor, make sure NDArray is synchronized"
#~ msgstr ""

#~ msgid "torch.Tensor"
#~ msgstr ""

#~ msgid "Reverse or permute the axes of an array"
#~ msgstr ""

#~ msgid "Returns :"
#~ msgstr ""

#~ msgid "the given with its axes permuted. A view is returned whenever possible"
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid "Bases: :py:class:`~matx_script_api.ObjectBase`"
#~ msgstr ""

#~ msgid "Base class for all tvm's runtime objects."
#~ msgstr ""

#~ msgid "Regular class implemented using pcre."
#~ msgstr ""

#~ msgid "Str types. Regular expression pattern."
#~ msgstr ""

#~ msgid "Booleans. Perform case-insensitive matching. The default is false"
#~ msgstr ""

#~ msgid ""
#~ "Booleans. \".\" matches any character at"
#~ " all, including the newline. The "
#~ "default is false"
#~ msgstr ""

#~ msgid ""
#~ "Booleans. Most white space in the "
#~ "pattern (other than in a character "
#~ "class), and characters between a # "
#~ "outside a character class and the "
#~ "next newline, inclusive, are ignored. An"
#~ " escaping backslash can be used to"
#~ " include a white space or # "
#~ "character as part of the pattern. "
#~ "The default is false."
#~ msgstr ""

#~ msgid ""
#~ "Booleans. Matches only at the beginning"
#~ " of the subject. The default is "
#~ "false."
#~ msgstr ""

#~ msgid ""
#~ "Booleans. Sequences such as \"\\d\" and"
#~ " \"\\w\" use Unicode properties to "
#~ "determine character types, instead of "
#~ "recognizing only characters with codes "
#~ "less than 128 via a lookup table."
#~ " The default is false."
#~ msgstr ""

#~ msgid ""
#~ "Try to apply the pattern at the"
#~ " start of the string, returning a "
#~ "tuple containing the matched string. If"
#~ " grouping version of regular pattern "
#~ "is used, then the text of all "
#~ "groups are returned."
#~ msgstr ""

#~ msgid "The source string."
#~ msgstr ""

#~ msgid "Offset in the subject at which to start matching"
#~ msgstr ""

#~ msgid ""
#~ "The matched groups. The first element"
#~ " in the tuple is indexed groups. "
#~ "The second element in the tuple is"
#~ " named groups."
#~ msgstr ""

#~ msgid ""
#~ "Return the string obtained by replacing"
#~ " the leftmost non-overlapping occurrences"
#~ " of the pattern in the input "
#~ "string by the replacement repl."
#~ msgstr ""

#~ msgid "The replacement string."
#~ msgstr ""

#~ msgid ""
#~ "The replaced string. If no match "
#~ "was found, returning the source string."
#~ msgstr ""

#~ msgid "Split a string by the occurrences of a pattern."
#~ msgstr ""

#~ msgid ""
#~ "A list containing the resulting "
#~ "substrings. If no match was "
#~ "foundï¼Œreturning a list containing only "
#~ "the source string, i.e. [input]."
#~ msgstr ""

#~ msgid "matx.Set: matx.Set implemented refering to python built-in dict,"
#~ msgstr ""

#~ msgid "set() -> construct empty set .. rubric:: Examples"
#~ msgstr ""

#~ msgid "set(iterable) -> construct set from iterable .. rubric:: Examples"
#~ msgstr ""

#~ msgid "Add an element to a set."
#~ msgstr ""

#~ msgid "This has no effect if the element is already present."
#~ msgstr ""

#~ msgid "Remove all elements."
#~ msgstr ""

#~ msgid "Return the difference of two or more sets as a new set."
#~ msgstr ""

#~ msgid "matx.Set"
#~ msgstr ""

#~ msgid "Remove all elements of another set from this set."
#~ msgstr ""

#~ msgid "Remove an element from a set if it is a member."
#~ msgstr ""

#~ msgid "If the element is not a member, do nothing."
#~ msgstr ""

#~ msgid ""
#~ "Increase the capacity of the set "
#~ "to a value that's greater or equal"
#~ " to new_size."
#~ msgstr ""

#~ msgid "Return the union of sets as a new set."
#~ msgstr ""

#~ msgid "Update a set with the union of itself and others."
#~ msgstr ""

#~ msgid "Bases: :py:class:`RuntimeError`"
#~ msgstr ""

#~ msgid "Default error thrown by packed functions."
#~ msgstr ""

#~ msgid "TError will be raised if you do not give any error type specification,"
#~ msgstr ""

#~ msgid "Double Array Trie Object"
#~ msgstr ""

#~ msgid "The key is word and the value is id"
#~ msgstr ""

#~ msgid "Find the longest substring of w[pos:] in the trie tree"
#~ msgstr ""

#~ msgid "The input word"
#~ msgstr ""

#~ msgid "The start position"
#~ msgstr ""

#~ msgid ""
#~ "Return the length and id of the"
#~ " matched substring.     If not found, "
#~ "return (0, -1)"
#~ msgstr ""

#~ msgid "Return the length and id of the matched substring."
#~ msgstr ""

#~ msgid "If not found, return (0, -1)"
#~ msgstr ""

#~ msgid "Find all substring of w[pos:] in the trie tree"
#~ msgstr ""

#~ msgid ""
#~ "Return a list of the length and"
#~ " id of the matched substring.     If"
#~ " not found, return []"
#~ msgstr ""

#~ msgid "Return a list of the length and id of the matched substring."
#~ msgstr ""

#~ msgid "If not found, return []"
#~ msgstr ""

#~ msgid "Insert a word and corresponding id into the trie tree"
#~ msgstr ""

#~ msgid "id, -1 for default"
#~ msgstr ""

#~ msgid "tuple object."
#~ msgstr ""

#~ msgid "The source."
#~ msgstr ""

#~ msgid "Get a global function by name"
#~ msgstr ""

#~ msgid "The name of the global function"
#~ msgstr ""

#~ msgid "Whether allow missing function or raise an error."
#~ msgstr ""

#~ msgid "**func** -- The function to be returned, None if function is missing."
#~ msgstr ""

#~ msgid "lib layout - lib/"
#~ msgstr ""

#~ msgid "libmatx.so"
#~ msgstr ""

#~ msgid "pcre/ libpcre.so"
#~ msgstr ""

#~ msgid "Register global function"
#~ msgstr ""

#~ msgid "The function name"
#~ msgstr ""

#~ msgid "The function to be registered."
#~ msgstr ""

#~ msgid "Whether override existing entry."
#~ msgstr ""

#~ msgid "**fregister** -- Register function if f is not specified."
#~ msgstr ""

#~ msgid ""
#~ "The following code registers my_packed_func"
#~ " as global function. Note that we "
#~ "simply get it back from global "
#~ "function table to invoke it from "
#~ "python side. However, we can also "
#~ "invoke the same function from C++ "
#~ "backend, or in the compiled TVM "
#~ "code."
#~ msgstr ""

