// Copyright 2023 ByteDance Ltd. and/or its affiliates.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

#include "matxscript/runtime/mlir/convert_memref.h"
#include "matxscript/runtime/mlir/func_loader.h"
#include "matxscript/runtime/codegen_all_includes.h"
#include <math.h>

#if defined(__clang__) || (defined(__GNUC__) && __GNUC__ >= 10 )
#if __has_builtin(__fp16)
static_assert(sizeof (__fp16) == 2, "__fp16(a.k.a float16) size must be 2 bytes, your machine/gcc may not support __fp16 type");
#else
#include <float.h>
#if __has_builtin(_Float16)
static_assert(sizeof (_Float16) == 2, "_Float16(a.k.a float16) size must be 2 bytes, your machine/gcc may not support _Float16 type");
using __fp16 = _Float16;
#endif
#endif
#else
using __fp16 = uint16_t;
#endif

static_assert(sizeof (float) == 4, "float(a.k.a float32) size must be 4 bytes, your machine/gcc may not support float type");
static_assert(sizeof (double) == 8, "double(a.k.a float64) size must be 8 bytes, your machine/gcc may not support double type");
using namespace ::matxscript::runtime;
using namespace matxscript::runtime::mlir;
extern "C" void* __matxscript_module_ctx = NULL;

extern "C" MATX_DLL MATXScriptFuncRegistry __matxscript_func_registry__;
extern "C" {{mlir_func_signature}};

namespace {
{{matx_api_declaration}}

{{matx_c_api_declaration}}

{{matx_api_definition}}

{{matx_c_api_definition}}

}  // namespace

extern "C" {

MATX_DLL MATXScriptBackendPackedCFunc __matxscript_func_array__[] = {
    (MATXScriptBackendPackedCFunc){{c_interface_func_name}},
};
MATX_DLL MATXScriptFuncRegistry __matxscript_func_registry__ = {
    "1\000{{py_func_name}}\000",    __matxscript_func_array__,
};

} // extern C

extern "C" {

MATX_DLL const char* __matxscript_closures_names__ = "1\000{{py_func_name}}\000";

} // extern C

